{"version":3,"sources":["shared/hooks/auth-hook.js","shared/components/FormElements/Button.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/LoadingSpinner.js","shared/context/auth-context.js","shared/hooks/http-hook.js","messages/components/MbItem.js","messages/components/MbList.js","messages/pages/MessageBoard.js","messages/components/MessageItem.js","messages/components/MessageList.js","messages/pages/Messages.js","shared/components/navigation/MainHeader.js","shared/components/navigation/NavLinks.js","shared/components/navigation/SideDrawer.js","shared/components/navigation/MainNavigation.js","user/pages/Auth.js","user/pages/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["logoutTimer","Button","props","to","exact","className","size","inverse","danger","children","type","onClick","disabled","Input","element","name","ref","valRef","defaultValue","dv","value","val","rows","label","Card","style","ModalOverlay","content","headerClass","header","onSubmit","event","preventDefault","contentClass","footerClass","footer","ReactDOM","createPortal","document","getElementById","Modal","CSSTransition","in","show","mountOnEnter","unmountOnExit","timeout","classNames","ErrorModal","onCancel","onClear","error","LoadingSpinner","asOverlay","AuthContext","createContext","isLoggedIn","userId","login","logout","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","MbItem","chat1","setChat1","chat2","setChat2","chat3","setChat3","process","chat","user","email","fetchEmail","_id","MbList","items","map","stuff","MessageBoard","auth","useContext","useForm","register","handleSubmit","submitVal1","setSubmitVal1","submitVal2","setSubmitVal2","history","useHistory","loadedMb","setLoadedMb","useParams","data","player1","player2","chatter1","JSON","stringify","Authorization","token","chatter2","rdplayer1","rdplayer2","messageboards","fetchMb","Fragment","MessageItem","setMessage","setName","messages","nameRD","fetchMessages","MessageList","reverse","Messages","loadedMessageBoard","setLoadedMessageBoard","mbId","clear","setClear","sender","messageboard","console","log","fetchMessageBoard","MainHeader","NavLinks","SideDrawer","MainNavigation","drawerIsOpen","setDrawerIsOpen","Auth","password","Signup","asOverylay","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.c32ad849.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        const tokenExpirationDate =\n            expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString()\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expiration) > new Date()\n        ) {\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\n        }\n    }, [login]);\n\n    return { token, login, logout, userId };\n};","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./Button.css\"\n\n\nconst Button = (props) => {\n    if (props.to) {\n        return (\n            <Link\n                to={props.to}\n                exact={props.exact}\n                className={`button button--${props.size || 'default'} ${props.inverse &&\n                    'button--inverse'} ${props.danger && 'button--danger'}`}\n            >\n                {props.children}\n            </Link>\n        );\n    }\n\n    return (\n        <button\n            className={`button button--${props.size || 'default'} ${props.inverse &&\n                'button--inverse'} ${props.danger && 'button--danger'}`}\n            type={props.type}\n            onClick={props.onClick}\n            disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    );\n}\n\nexport default Button\n","import React from \"react\"\n\nconst Input = (props) => {\n\n    const element = props.element === \"input\" ? (\n        <input\n            name={props.name}\n            ref={props.valRef}\n            type={props.type}\n            defaultValue={props.dv}\n            value={props.val}\n\n        />\n    ) : (\n            <textarea\n                rows={props.rows || 3}\n                ref={props.valRef}\n                name={props.name}\n                value={props.val}\n            />\n        )\n\n    return (\n        <div>\n            <label>\n                {props.label}\n            </label> <br />\n            {element}\n\n        </div>\n    )\n}\n\nexport default Input","import React from \"react\"\n\nimport \"./Card.css\"\n\nconst Card = props => {\n\n\n\n    return (\n        <div className={`card ${props.className}`} style={props.style}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Card","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { CSSTransition } from \"react-transition-group\"\n\nimport \"./Modal.css\"\n\nconst ModalOverlay = (props) => {\n    const content = (\n        <div className={`modal ${props.className}`} style={props.style}>\n            <header className={`modal__header ${props.headerClass}`}>\n                <h2>{props.header}</h2>\n            </header>\n            <form\n                onSubmit={\n                    props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n                }\n            >\n                <div className={`modal__content ${props.contentClass}`}>\n                    {props.children}\n                </div>\n                <footer className={`modal__footer ${props.footerClass}`}>\n                    {props.footer}\n                </footer>\n            </form>\n        </div>\n    );\n\n    return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\n}\n\nconst Modal = (props) => {\n    return (\n\n        <CSSTransition\n            in={props.show}\n            mountOnEnter\n            unmountOnExit\n            timeout={200}\n            classNames=\"modal\"\n        >\n            <ModalOverlay {...props} />\n        </CSSTransition>\n\n    )\n}\n\nexport default Modal","import React from \"react\"\nimport Button from \"../FormElements/Button\"\n\nimport Modal from \"./Modal\"\n\nconst ErrorModal = props => {\n\n    return (\n        <Modal\n            onCancel={props.onClear}\n            header=\"An Error Occurred!\"\n            show={!!props.error}\n            footer={<Button onClick={props.onClear}> okay </Button>}\n        >\n            <p>{props.error}</p>\n        </Modal>\n    )\n}\n\nexport default ErrorModal","import React from \"react\"\n\nimport \"./LoadingSpinner.css\"\n\nconst LoadingSpinner = props => {\n    return (\n        <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n            <div className=\"lds-dual-ring\"></div>\n        </div>\n    );\n}\n\nexport default LoadingSpinner","import { createContext } from \"react\"\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    login: () => { },\n    logout: () => { }\n})","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(\n        async (url, method = \"GET\", body = null, headers = {}) => {\n            setIsLoading(true);\n            const httpAbortCtrl = new AbortController();\n            activeHttpRequests.current.push(httpAbortCtrl);\n\n            try {\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal,\n                });\n\n                const responseData = await response.json();\n\n                activeHttpRequests.current = activeHttpRequests.current.filter(\n                    (reqCtrl) => reqCtrl !== httpAbortCtrl\n                );\n\n                if (!response.ok) {\n                    throw new Error(responseData.message);\n                }\n\n                setIsLoading(false);\n                return responseData;\n            } catch (err) {\n                setError(err.message);\n                setIsLoading(false);\n                throw err;\n            }\n        },\n        []\n    );\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError };\n};","import React, { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport Card from \"../../shared/components/UIElements/Card\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nimport \"./MbItem.css\"\n\nconst MbItem = (props) => {\n\n    const [chat1, setChat1] = useState()\n    const [chat2, setChat2] = useState()\n    const [chat3, setChat3] = useState()\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    useEffect(() => {\n        const fetchEmail = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findemail/${props.chat[0]}`\n                )\n                setChat1(responseData.user.email)\n            } catch (err) {\n\n            }\n        }\n        fetchEmail()\n\n    }, [sendRequest, props.chat])\n\n    useEffect(() => {\n        const fetchEmail = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findemail/${props.chat[1]}`\n                )\n                setChat2(responseData.user.email)\n            } catch (err) {\n\n            }\n        }\n        fetchEmail()\n\n    }, [sendRequest, props.chat])\n\n\n\n    useEffect(() => {\n        const fetchEmail = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findemail/${props.chat[2]}`\n                )\n                setChat3(responseData.user.email)\n            } catch (err) {\n\n            }\n        }\n        fetchEmail()\n\n    }, [sendRequest, props.chat])\n\n\n\n\n\n\n    return (\n        <li className=\"mb-item\">\n            <Card> <Link to={`/${props._id}/messageboard`}>\n                <div>\n                    <div>\n                        {chat1}<br />\n                        {chat2}<br />\n                        {chat3}\n\n                    </div>\n                </div>\n            </Link>\n            </Card>\n\n        </li>\n    )\n}\n\nexport default MbItem","import React from \"react\"\nimport MbItem from \"./MbItem\"\nimport \"./MbList.css\"\n\nconst MbList = (props) => {\n\n    return (\n        <ul className=\"mb-list\">\n\n            { props.items.map((stuff) =>\n\n                <MbItem\n                    key={stuff._id}\n                    _id={stuff._id}\n                    chat={stuff.chat}\n                />\n            )\n\n            }\n        </ul>\n    )\n}\n\nexport default MbList","import React, { useContext, useEffect, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport Button from \"../../shared/components/FormElements/Button\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport Card from \"../../shared/components/UIElements/Card\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport MbList from \"../components/MbList\"\n\n\n\n\nconst MessageBoard = () => {\n\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n    const [submitVal1, setSubmitVal1] = useState()\n    const [submitVal2, setSubmitVal2] = useState()\n\n\n    const history = useHistory()\n\n    const [loadedMb, setLoadedMb] = useState()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const userId = useParams().userId\n\n\n\n\n    const onSubmit = async (data) => {\n\n        let chatter1\n        let chatter2\n\n\n\n        if (data.player1 === \"\") {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/getuserbyemail/${data.player2}`\n                )\n                chatter1 = responseData.user[0]._id\n            } catch (err) {\n\n            }\n\n            try {\n                await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/createmb`,\n                    \"POST\",\n                    JSON.stringify({\n                        chat: [\n                            auth.userId,\n                            chatter1,\n\n                        ]\n                    }),\n                    {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                setSubmitVal2(\"\")\n                history.push(\"/\" + userId + \"/messageboards\")\n            } catch (err) {\n\n            }\n        } else if (data.player2 === \"\") {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/getuserbyemail/${data.player1}`\n                )\n                chatter2 = responseData.user[0]._id\n            } catch (err) {\n\n            }\n\n            try {\n                await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/createmb`,\n                    \"POST\",\n                    JSON.stringify({\n                        chat: [\n                            auth.userId,\n                            chatter2,\n\n                        ]\n                    }),\n                    {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                setSubmitVal1(\"\")\n                history.push(\"/\" + userId + \"/messageboards\")\n            } catch (err) {\n\n            }\n        } else {\n\n            try {\n                const rdplayer1 = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/getuserbyemail/${data.player1}`\n\n                )\n                chatter1 = rdplayer1.user[0]._id\n                const rdplayer2 = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/getuserbyemail/${data.player2}`\n\n                )\n                chatter2 = rdplayer2.user[0]._id\n\n            } catch (err) {\n\n            }\n\n            try {\n                await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/createmb`,\n                    \"POST\",\n                    JSON.stringify({\n                        chat: [\n                            auth.userId,\n                            chatter1,\n                            chatter2,\n\n                        ]\n                    }),\n                    {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                setSubmitVal1(\"\")\n                setSubmitVal2(\"\")\n                history.push(\"/\" + userId + \"/messageboards\")\n            } catch (err) {\n\n            }\n        }\n\n\n    }\n\n\n\n\n    useEffect(() => {\n\n        const fetchMb = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/messageboards/${userId}`,\n                )\n                setLoadedMb(responseData.messageboards)\n            } catch (err) {\n\n            }\n        }\n        fetchMb()\n    }, [sendRequest, userId])\n\n\n\n\n\n\n\n\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && (\n                <div>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <Card>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Input\n                        element=\"input\"\n                        valRef={register}\n                        name=\"player1\"\n                        val={submitVal1}\n\n                    />\n                    <Input\n                        element=\"input\"\n                        valRef={register}\n                        name=\"player2\"\n                        val={submitVal2}\n                    />\n\n                    <Button>start messenging</Button>\n                </form>\n            </Card>\n            {!isLoading && loadedMb && <MbList items={loadedMb} />}\n        </React.Fragment>\n    )\n\n}\n\n\nexport default MessageBoard","import React, { useEffect, useState } from \"react\"\nimport Card from \"../../shared/components/UIElements/Card\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\n\nconst MessageItem = (props) => {\n\n    const [message, setMessage] = useState()\n    const [name, setName] = useState()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n\n\n    useEffect(() => {\n\n        const fetchMessages = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/getmessages/${props.messages}`\n                )\n                setMessage(responseData.message.message)\n                const nameRD = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/findmessenger/${props.messages}`\n\n                )\n                setName(nameRD.message[0].name)\n            } catch (err) {\n\n            }\n\n        }\n        fetchMessages()\n    }, [sendRequest, props.messages])\n\n\n    return (\n        <li className=\"mb-item\">\n            <Card>\n                <div>\n\n                    {name} : {message}\n                </div>\n            </Card>\n        </li>\n    )\n}\n\nexport default MessageItem","import React from \"react\"\nimport MessageItem from \"./MessageItem\"\n\nimport \"./MessageList.css\"\n\nconst MessageList = (props) => {\n\n    return (\n        <ul className=\"mb-list\">\n            {\n                props.stuff.map((data) =>\n                    <MessageItem\n                        key={data}\n                        messages={data}\n                    />\n                ).reverse()\n            }\n        </ul>\n    )\n}\n\nexport default MessageList","import React, { useEffect, useState, useContext } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport Card from \"../../shared/components/UIElements/Card\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { useForm } from \"react-hook-form\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport MessageList from \"../components/MessageList\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nconst Messages = () => {\n\n\n    const auth = useContext(AuthContext)\n\n    const [loadedMessageBoard, setLoadedMessageBoard] = useState()\n\n    const { register, handleSubmit } = useForm()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const mbId = useParams().mbId\n\n    const [clear, setClear] = useState()\n\n\n    const onSubmit = async (data) => {\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/messages/createMessage`,\n                \"POST\",\n                JSON.stringify({\n                    sender: auth.userId,\n                    messageboard: mbId,\n                    message: data.messages,\n                    chat: [auth.userId]\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n            setClear(\"\")\n        } catch (err) {\n            console.log(err)\n        }\n\n        const fetchMessageBoard = async () => {\n\n\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/findmb/${mbId}`\n                )\n                setLoadedMessageBoard(responseData.messageboard.messages)\n                console.log(responseData.messageboard)\n\n\n            } catch (err) {\n\n            }\n\n\n\n        }\n        fetchMessageBoard()\n\n    }\n\n\n\n    useEffect(() => {\n        const fetchMessageBoard = async () => {\n\n\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/messages/findmb/${mbId}`\n                )\n                setLoadedMessageBoard(responseData.messageboard.messages)\n                console.log(responseData.messageboard)\n\n\n            } catch (err) {\n\n            }\n\n\n\n        }\n        fetchMessageBoard()\n    }, [sendRequest, mbId])\n\n    // useEffect(()=> {\n    //     const fetchMessages = async ()=> {\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `http://localhost:5000/api/messages/getmessages/${messages}`\n    //             )\n    //         } catch (err) {\n\n    //         }\n    //     }\n    // })\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && (\n                <div>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div>\n                <Card>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <Input\n                            valRef={register}\n                            name=\"messages\"\n                            val={clear}\n                        />\n                        <Button>message</Button>\n                    </form>\n                </Card>\n            </div>\n            {!isLoading && loadedMessageBoard && <MessageList stuff={loadedMessageBoard} />}\n        </React.Fragment>\n    )\n}\n\nexport default Messages","import React from \"react\"\nimport \"./MainHeader.css\"\n\nconst MainHeader = (props) => {\n    return <header className=\"main-header\">\n        {props.children}\n    </header>\n}\n\nexport default MainHeader","import React, { useContext } from \"react\"\nimport { NavLink } from \"react-router-dom\"\n\n\nimport { AuthContext } from \"../../context/auth-context\"\nimport \"./NavLinks.css\"\n\nconst NavLinks = () => {\n    const auth = useContext(AuthContext)\n\n    return (\n        <ul className=\"nav-links\">\n            {auth.isLoggedIn && (\n                <li>\n                    <NavLink to={`/${auth.userId}/messageboards`}>\n                        messages\n                    </NavLink>\n                </li>\n            )}\n            {!auth.isLoggedIn && (\n                <li>\n                    <NavLink to={`/auth`}>\n                        login\n                    </NavLink>\n                </li>\n            )}\n            {auth.isLoggedIn && (\n                <li>\n                    <button onClick={auth.logout}>LOGOUT</button>\n                </li>\n            )}\n        </ul>\n    )\n\n}\n\nexport default NavLinks","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { CSSTransition } from \"react-transition-group\"\n\nimport \"./SideDrawer.css\"\n\nconst SideDrawer = (props) => {\n    const content = (\n        <CSSTransition\n            in={props.show}\n            timeout={200}\n            classNames=\"slide-in-left\"\n            mountOnEnter\n            unmountOnExit\n        >\n            <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\n        </CSSTransition>\n    )\n\n    return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n}\n\nexport default SideDrawer","import React, { useState } from \"react\"\nimport MainHeader from \"./MainHeader\"\nimport NavLinks from \"./NavLinks\"\nimport SideDrawer from \"./SideDrawer\"\nimport \"./MainNavigation.css\"\n\n\nconst MainNavigation = () => {\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false)\n\n    const openDrawerHandler = () => {\n        setDrawerIsOpen(true)\n    }\n\n    const closeDrawerHandler = () => {\n        setDrawerIsOpen(false)\n    }\n\n    return (\n        <React.Fragment>\n            <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler} >\n                <nav className=\"main-navigation__drawer-nav\">\n                    <NavLinks />\n                </nav>\n            </SideDrawer>\n\n            <MainHeader>\n                <button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\n                    <span />\n\n                    <span /> <span />\n                </button>\n                <nav className=\"main-navigation__header-nav\">\n                    <NavLinks />\n                </nav>\n            </MainHeader>\n        </React.Fragment>\n    )\n}\n\nexport default MainNavigation","import React, { useContext } from \"react\"\nimport { useForm } from 'react-hook-form'\n\nimport { Link } from \"react-router-dom\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nimport Input from \"../../shared/components/FormElements/Input\"\nimport Card from \"../../shared/components/UIElements/Card\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nconst Auth = () => {\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const { register, handleSubmit } = useForm()\n\n\n\n\n\n    const onSubmit = async (data) => {\n\n\n        try {\n            const responseData = await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/user/login\",\n                \"POST\",\n                JSON.stringify({\n                    email: data.login,\n                    password: data.password\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n\n\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className=\"authentication\">\n                {isLoading && <LoadingSpinner asOverlay />}\n                <h2>please login</h2>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Input\n                        name=\"login\"\n                        valRef={register}\n                        label=\"email\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"password\"\n                        valRef={register}\n                        label=\"password\"\n                        element=\"input\"\n                    />\n                    did you mean to <Link to=\"/signup\"> signup </Link> <br />\n                    <Button type=\"submit\">login</Button>\n                </form>\n\n\n\n            </Card>\n        </React.Fragment>\n    )\n\n}\n\nexport default Auth","import React, { useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport Card from \"../../shared/components/UIElements/Card\"\n\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\n\n\nconst Signup = () => {\n\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const onSubmit = async (data) => {\n\n        try {\n            const responseData = await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/user/signup\",\n                \"POST\",\n                JSON.stringify({\n                    name: data.name,\n                    email: data.email,\n                    password: data.password\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card>\n                {isLoading && <LoadingSpinner asOverylay />}\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Input\n                        name=\"name\"\n                        valRef={register}\n                        label=\"name\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"email\"\n                        valRef={register}\n                        label=\"email\"\n                        element=\"input\"\n                    />\n\n                    <Input\n                        name=\"password\"\n                        valRef={register}\n                        label=\"password\"\n                        element=\"input\"\n                        type=\"password\"\n                    />\n                    <Button type=\"submit\">\n                        submit\n                    </Button>\n                </form>\n            </Card>\n        </React.Fragment>\n    )\n\n}\n\nexport default Signup ","import React from \"react\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport MessageBoard from \"./messages/pages/MessageBoard\"\nimport Messages from \"./messages/pages/Messages\"\nimport MainNavigation from \"./shared/components/navigation/MainNavigation\"\n\nimport { AuthContext } from \"./shared/context/auth-context\"\nimport { useAuth } from './shared/hooks/auth-hook';\nimport Auth from \"./user/pages/Auth\"\nimport Signup from \"./user/pages/Signup\"\n\nconst App = () => {\n\n  const { token, login, logout, userId } = useAuth();\n\n  let routes\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/:userId/messageboards\">\n          <MessageBoard />\n        </Route>\n        <Route path=\"/:mbId/messageboard\">\n          <Messages />\n        </Route>\n      </Switch>\n    )\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/signup\">\n          <Signup />\n        </Route>\n      </Switch>\n    )\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, token: token, userId: userId, login: login, logout: logout }}\n    >\n\n      <Router>\n        <MainNavigation />\n        <main>{routes}</main>\n      </Router>\n\n\n    </AuthContext.Provider>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}